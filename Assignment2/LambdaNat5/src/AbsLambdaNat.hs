

module AbsLambdaNat where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = Prog [Exp]
  deriving (Eq, Ord, Show, Read)

data Exp
    = EAbs Id Exp
    | EIf Exp Exp Exp Exp
    | ELet Id Exp Exp
    | ERec Id Exp Exp
    | EHd Exp
    | ETl Exp
    | ELE Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ETimes Exp Exp
    | EApp Exp Exp
    | ENil
    | ECons Exp Exp
    | EInt Integer
    | EVar Id
    | EFix Exp
  deriving (Eq, Ord, Show, Read)

